//creation of three graphic result windows, a run control panel, an I/V electrode control panel

proc spkrpt() {
print "The cell's firing rate is ", spike_times.size*1000/tstop, " Hz"
}

objectvar save_window_, rvp_
objectvar scene_vector_[6]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin I/V Clamp Electrode
{
load_file("electrod.hoc")
}
{
ocbox_=new Electrode(0)
execute("can_locate=1 sec=\"DA\" xloc=0.5 locate(0)", ocbox_)
execute("vc.dur[0]=0.1 vc.amp[0]=-65", ocbox_)
execute("vc.dur[1]=2.5 vc.amp[1]=10", ocbox_)
execute("vc.dur[2]=100 vc.amp[2]=-65", ocbox_)
execute("stim.del=2000 stim.dur=500 stim.amp=0", ocbox_)
execute("vcsteps=5", ocbox_)
execute("samp=stim.amp  store_vclamp() glyph()", ocbox_)
ocbox_ = ocbox_.v1
ocbox_.map("I/V Clamp Electrode", 876, 540, 245.7, 331.2)
}
objref ocbox_
//End I/V Clamp Electrode

{
save_window_ = new Graph(0)
save_window_.size(0,5000,-73,13)
scene_vector_[3] = save_window_
{save_window_.view(0, -73, 5000, 86, 0, 108, 640.8, 127)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}
{
xpanel("RunControl", 0)
v_init = -65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","{run() spkrpt()}")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 5000
xvalue("t","t", 2 )
tstop = 5000
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 14.52
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(872,103)
}
{
save_window_ = new Graph(0)
save_window_.size(2800,3200,-0.001,5.82077e-011)
scene_vector_[4] = save_window_
{save_window_.view(2800, -0.001, 400, 0.001, -2, 342, 645.3, 126.1)}
graphList[3].append(save_window_)
save_window_.save_name("graphList[3].")
save_window_.xexpr("t", 0)
save_window_.label(0.497211, 0.214829, "x-axis: t", 2, 1, 0, 0, 1)
save_window_.addexpr("DA.icaHVA_caHVA( 0.5 )", 2, 1, 0.498605, 0.378985, 2)
save_window_.addexpr("DA.icaLVA_caLVA( 0.5 )", 4, 1, 0.498605, 0.550277, 2)
save_window_.addexpr("DA.ih_H( 0.5 )", 9, 1, 0.5, 0.9, 2)
save_window_.addexpr("DA.ina_NaT( 0.5 )", 1, 1, 0.5, 0.9, 2)
save_window_.addexpr("DA.ina_NaP( 0.5 )", 3, 1, 0.5, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(2800,3200,0,0.001)
scene_vector_[5] = save_window_
{save_window_.view(2800, 0, 400, 0.001, -3, 570, 645.3, 127.9)}
graphList[3].append(save_window_)
save_window_.save_name("graphList[3].")
save_window_.xexpr("t", 0)
save_window_.label(0.5, 0.9, "x-axis: t", 2, 1, 0, 0, 1)
save_window_.addexpr("DA.ik_kDR( 0.5 )", 2, 1, 0.5, 0.9, 2)
save_window_.addexpr("DA.ik_kM( 0.5 )", 1, 1, 0.5, 0.9, 2)
save_window_.addexpr("DA.ik_kA( 0.5 )", 3, 1, 0.500139, 0.9, 2)
save_window_.addexpr("DA.ik_cagk( 0.5 )", 5, 1, 0.500139, 0.9, 2)
}

objectvar scene_vector_[1]
{doNotify()}
 xopen("param_box.ses")